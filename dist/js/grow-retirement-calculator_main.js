var calculator=new Vue({el:"#calculator",data:{currentAge:"",retirementAge:"",baseSalary:"",savingsYesNo:"",currentSavings:"",annualGrowth:"",retirementIncome:"",totalNeeded:"",A:"",saveAmount:"",percentOfSalary:"",ageAdjusted:"",incomeAdjusted:"",showResults:!1,showError:!1,showAgeError:!1,showExpectations:!0,showSavings:!0,showOnTrack:!1},computed:{},methods:{savingsGoal:function(){this.currentAge&&this.retirementAge&&this.baseSalary&&this.annualGrowth&&this.retirementIncome?(this.showResults=!0,this.showError=!1,this.showAgeError=!1):(this.showError=!0,this.showResults=!1,this.showAgeError=!1),this.currentAge>this.retirementAge&&(this.showResults=!1,this.showError=!1,this.showAgeError=!0),"no"==this.savingsYesNo&&this.currentSavings;let t=this.currentSavings,e=this.annualGrowth,s=this.retirementAge-this.currentAge;tW=(54-this.currentAge)/s,tW2=(this.retirementAge-54)/s;let o=.03*tW+.015*tW2+1,r=Math.pow(o,s)*this.baseSalary,h=90-this.retirementAge,a=r*this.retirementIncome;for(this.totalNeeded=0,i=0;i<h;i++)this.totalNeeded=this.totalNeeded/Math.pow(1+.04/12,12)+a;"yes"==this.savingsYesNo&&(this.A=t*Math.pow(1+e/12,12*s),this.totalNeeded=this.totalNeeded-this.A);let n=this.totalNeeded*(e/12)/(Math.pow(1+e/12,12*s)-1);this.percentOfSalary=Math.round(n/(this.baseSalary/12)*100),n=n.toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:0}),this.saveAmount="$"+n,console.log(n),"-"==n.charAt(0)||"0"==n.charAt(0)?(this.showSavings=!1,this.showOnTrack=!0,this.showExpectations=!1):(this.showSavings=!0,this.showOnTrack=!1,this.showExpectations=!0),this.adjustForAge(t,e),this.adjustForIncome(t,e,r,s,h)},adjustForAge:function(t,e){if("70"==this.retirementAge&&".70"==this.retirementIncome)this.showExpectations=!1;else if("70"!==this.retirementAge){let s=70-this.currentAge,i=Math.pow(1.02,s)*this.baseSalary*this.retirementIncome*20;if("yes"==this.savingsYesNo){i-=t*Math.pow(1+e/12,12*s)}let o=i*(e/12)/(Math.pow(1+e/12,12*s)-1);o=o.toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:0}),this.ageAdjusted="If you wait until age 70 to retire, your required monthly savings go down to $"+o+"."}else"70"==this.retirementAge&&(this.ageAdjusted=" ")},adjustForIncome:function(t,e,s,o,r){if(".70"!==this.retirementIncome){let h=.7*s,a=0;for(i=0;i<r;i++)a=a/Math.pow(1+.04/12,12)+h;if("yes"==this.savingsYesNo){a-=t*Math.pow(1+e/12,12*o)}let n=a*(e/12)/(Math.pow(1+e/12,12*o)-1);n=n.toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:0}),this.incomeAdjusted="If you can live on a tighter budget in retirement by adjusting your needs to 70% of your final salary, you only need to save $"+n+" per month."}else this.incomeAdjusted=""}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
